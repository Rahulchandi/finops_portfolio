## This script finds orphaned snapshots from a CSV file and creates JIRA tickets for each snapshot. Orphaned snapshots can add a lot of costs to bills if they aren't deleted in time!

## Dependencies: 
## 1) requirements.txt file to install dependencies.
## 2) accounts.txt file with accounts you want to look over
## 3) pipeline file if running it via your CI/CD pipeline (optional)
## - if you have a pipeline file, make sure to add a step that triggers the JIRA ticket creation after intall the requirements.txt and running the python file
## - make sure to specify which project to add the ticket in
## 4) authentication method to access JIRA (API token, username/password, etc)
## 5) authentication method to access AWS (see below)

import boto3
import csv
import os
from botocore.exceptions import ClientError
from botocore.config import Config

print("🚀 Starting orphaned snapshots scan...")
print(f"📁 Current directory: {os.getcwd()}")
print(f"📄 Files in directory: {os.listdir('.')}")

# --- AWS Authentication ---
# Please authenticate to AWS using your preferred method (e.g., environment variables, AWS config file, assumed role, etc.)
# Example: export AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_SESSION_TOKEN (if needed)
# Or use a profile: boto3.Session(profile_name="your-profile")
# Or implement your own authentication logic below.

# Example: Uncomment and edit as needed
# session = boto3.Session(profile_name="your-profile")
# Or just use the default session:
session = boto3.Session()

ROLE_SESSION_NAME = "build-session"
ROLE_NAME = "YourRoleName"  # Update as needed

# Read accounts.txt
print("📋 Reading accounts.txt...")
try:
    with open("accounts.txt") as f:
        raw_lines = [line.strip() for line in f if line.strip()]
        accounts = []
        for line in raw_lines:
            parts = line.split(":")
            if len(parts) != 2:
                print(f"⚠️ Skipping malformed line: {line}")
                continue
            accounts.append(parts)
    print(f"📋 Found {len(accounts)} accounts")
except FileNotFoundError:
    print("❌ accounts.txt not found")
    raise

output_file = "orphaned_snapshots.csv"
print(f"📁 Writing results to: {os.path.abspath(output_file)}")

# Write CSV header
with open(output_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(["AccountId", "Region", "SnapshotId", "VolumeSize", "StartTime", "Description"])

for account_name, account_number in accounts:
    print(f"\n🔄 Processing {account_name} ({account_number})")

    role_arn = f"arn:aws:iam::{account_number}:role/{ROLE_NAME}"
    print(f"🔐 Assuming role: {role_arn}")

    # --- AWS Role Assumption ---
    # Replace the following block with your preferred authentication/role assumption logic.
    # Example: Use sts:assume_role, or just use the default session if you have access.
    sts_client = session.client("sts", config=Config(region_name="us-east-1"))
    try:
        # Example: Uncomment and edit as needed for your authentication method
        # creds = sts_client.assume_role(
        #     RoleArn=role_arn,
        #     RoleSessionName=ROLE_SESSION_NAME
        # )["Credentials"]

        # assumed_session = boto3.Session(
        #     aws_access_key_id=creds["AccessKeyId"],
        #     aws_secret_access_key=creds["SecretAccessKey"],
        #     aws_session_token=creds["SessionToken"]
        # )

        # If not assuming a role, just use the default session:
        assumed_session = session

        ec2_client = assumed_session.client('ec2', region_name='us-east-1')
        regions = [region['RegionName'] for region in ec2_client.describe_regions()['Regions']]
        print(f"📍 Will check {len(regions)} regions")

        found_orphans = False
        for region in regions:
            print(f"🔍 Checking {account_number} in {region}...")
            try:
                ec2 = assumed_session.client('ec2', region_name=region)

                snapshots = []
                paginator = ec2.get_paginator('describe_snapshots')
                for page in paginator.paginate(OwnerIds=['self']):
                    snapshots.extend(page['Snapshots'])

                images = []
                paginator = ec2.get_paginator('describe_images')
                for page in paginator.paginate(Owners=['self']):
                    images.extend(page['Images'])

                used_in_amis = {
                    mapping['Ebs']['SnapshotId']
                    for image in images
                    for mapping in image.get('BlockDeviceMappings', [])
                    if 'Ebs' in mapping and 'SnapshotId' in mapping['Ebs']
                }

                volumes = []
                paginator = ec2.get_paginator('describe_volumes')
                for page in paginator.paginate():
                    volumes.extend(page['Volumes'])

                used_in_volumes = {
                    volume['SnapshotId']
                    for volume in volumes
                    if 'SnapshotId' in volume
                }

                used_snapshot_ids = used_in_amis.union(used_in_volumes)

                with open(output_file, mode='a', newline='', encoding='utf-8') as file:
                    writer = csv.writer(file)
                    for snapshot in snapshots:
                        snapshot_id = snapshot['SnapshotId']
                        if snapshot_id not in used_snapshot_ids:
                            writer.writerow([
                                account_number,
                                region,
                                snapshot_id,
                                snapshot.get('VolumeSize', ''),
                                snapshot.get('StartTime', ''),
                                snapshot.get('Description', '')
                            ])
                            found_orphans = True
            except ClientError as e:
                print(f"⚠️ Failed to process region {region} for account {account_number}: {e}")

        if found_orphans:
            print(f"✅ Orphaned snapshots found in {account_number}")
        else:
            print(f"🎉 No orphaned snapshots found in {account_number}")

    except ClientError as e:
        print(f"❌ Failed to assume role for account {account_number}: {e}")

# Final summary
print("\n📊 Scan Summary:")
if os.path.exists(output_file):
    with open(output_file, 'r') as f:
        lines = f.readlines()
        print(f"📄 CSV file created with {len(lines)} lines (including header)")
        if len(lines) > 1:
            print(f"🔍 Found {len(lines) - 1} orphaned snapshots")
            print("📋 First few entries:")
            for i, line in enumerate(lines[:6]):
                print(f"  {i}: {line.strip()}")
        else:
            print("🎉 No orphaned snapshots found")
else:
    print("❌ CSV file was not created")

print(f"📁 Files in current directory: {os.listdir('.')}")

print("🏁 Scan completed!")